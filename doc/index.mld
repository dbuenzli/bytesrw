{0 Bytesrw {%html: <span class="version">%%VERSION%%</span>%}}

Bytesrw extends the OCaml {!Bytes} module with composable, memory
efficient, byte stream {{!Bytesrw.Bytes.Reader}readers} and
{{!Bytesrw.Bytes.Writer}writers} compatible with effect based
concurrency.

Except for byte slice {{!Bytesrw.Bytes.Slice.validity}life-times},
these abstractions intentionally separate away ressource management
and the specifics of reading and writing bytes.

{1:manuals Manuals}

The following manuals are available:

{ul
{- The {{!quick}quick start} should get you started}
{- The {{!tutorial}tutorial} shows you how to devise your own
   stream processors}
{- The {{!conventions}conventions} are conventions to follow
   if you write byte stream reader and writed based codecs}}

{1:bytesrw Library [bytesrw]}

This library has the base definition of bytes
reader and writers as an extension of the {!Stdlib.Bytes}
module.

{!modules:
Bytesrw}

{!modules:
Bytesrw.Bytes.Slice
Bytesrw.Bytes.Stream
Bytesrw.Bytes.Reader
Bytesrw.Bytes.Writer}

{1:bytesrw_kit Library [bytesrw.kit]}

The following modules rely only the [Stdlib]:

{!modules:
Bytesrw_utf}

{1:bytesrw_compress Libraries [bytesrw.{zlib,zstd}]}

Each of these modules lives in its corresponding
library and depends on their canonical C library.

{!modules:
Bytesrw_zlib
Bytesrw_zstd
}

{1:quick Quick start}

{1:todo TODO}

{ul
{- Use size maybe ? But size is never used by the stdlib.}
{- [Bytesrw_unix].}
{- Small howto and a simple tutorial to devise your own. Show read
   sniffing.}
{- Sort out an error convention. Perhaps
   have a Bytes.Stream_error exception and an extensible type.}
{- [Bytesrw_zstd], add per frame control,
   figure out the mulithreaded compression support (we'd need to copy
   the bytes), add stream positions to errors.}
{- Possibly we could add an hmap to readers and writers. But let's KISS
   for now.}
{- Slices, add bigbytes converters.}}

See also the {{!page-notes}design notes}.
