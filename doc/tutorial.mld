{0 Bytes reader and writer tutorial}

{1:positions Stream positions}

For many usages stream positions are irrelevant. However one should
pay attention to them when devising readers and writers so that errors
are reported accurately.

Byte reader and writers maintain a stream position which is the
zero-based index of the next byte to read or write. This value
can also be intepreted as the number of bytes that have been
read or written.

Byte reader and writers also have a parent position. In many case this
position will be 0. But when a reader [r1] starts reading from a
reader [r0] it should set its parent position to the position of
[r0]. Equally when a writer [w1] starts writing on a writer [w0] it
should set its parent position to the position of [w0]. Doing so
ensures that each reader and writer reports errors in the position
space they need to and allows to locate errors when readers and
writers are nested.

For example below it makes it possible to setup an error handling
structure that is able to report that a JSON decode occured at a given byte
in the JSON file, which is located at byte [m] in the decompressed
gzip stream that starts at byte [n] is some file format.

{[
| read(2)
0
|................| raw bytes
^                .
| Decode format  .
0  n             .
|..|.....|.......| (file format)
   ^
   | gzip decompression (multi members)
   0        m
   |........|.......|.......| (gzip decompressed)
            ^       .
            |       .
            0       .
            |.......| (JSON)
            ^
            | JSON decode
]}

{[
            |.......| (JSON)
            0       .
            | JSON encode
            v       .
   |........|.......|.......| (gzip decompressed)
   0        m
   | gzip compression (multi members)
0  v
|..|.....|.......| (file format)
0  n             .
| write format   .
v                .
|................| raw bytes
0
| write(2)
]}